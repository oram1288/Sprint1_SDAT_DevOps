Index: src/main/java/com/keyin/aircraft/Aircraft.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.keyin.aircraft;\n\nimport com.keyin.airport.Airport;\nimport com.keyin.passengers.Passengers;\nimport jakarta.persistence.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Entity\npublic class Aircraft {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String type;\n    private String airlineName;\n    private int numberOfPassengers;\n\n    @ManyToMany\n    private List<Airport> airports = new ArrayList<>();\n\n    @OneToMany\n    private List<Passengers> passengers = new ArrayList<>();\n\n    // Constructors\n    public Aircraft() {}\n\n    public Aircraft(String type, String airlineName, int numberOfPassengers) {\n        this.type = type;\n        this.airlineName = airlineName;\n        this.numberOfPassengers = numberOfPassengers;\n    }\n\n    // Getters and Setters\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public String getAirlineName() {\n        return airlineName;\n    }\n\n    public void setAirlineName(String airlineName) {\n        this.airlineName = airlineName;\n    }\n\n    public int getNumberOfPassengers() {\n        return numberOfPassengers;\n    }\n\n    public void setNumberOfPassengers(int numberOfPassengers) {\n        this.numberOfPassengers = numberOfPassengers;\n    }\n\n    public List<Airport> getAirports() {\n        return airports;\n    }\n\n    public void setAirports(List<Airport> airports) {\n        this.airports = airports;\n    }\n\n    public List<Passengers> getPassengers() {\n        return passengers;\n    }\n\n    public void setPassengers(List<Passengers> passengers) {\n        this.passengers = passengers;\n    }\n\n    // toString method\n    @Override\n    public String toString() {\n        return \"Aircraft{\" +\n                \"id=\" + id +\n                \", type='\" + type + '\\'' +\n                \", airlineName='\" + airlineName + '\\'' +\n                \", numberOfPassengers=\" + numberOfPassengers +\n                '}';\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/keyin/aircraft/Aircraft.java b/src/main/java/com/keyin/aircraft/Aircraft.java
--- a/src/main/java/com/keyin/aircraft/Aircraft.java	(revision 2dab17dc1580b96be4b7ab6da05e19f6935ceb78)
+++ b/src/main/java/com/keyin/aircraft/Aircraft.java	(date 1730414471301)
@@ -1,6 +1,7 @@
 package com.keyin.aircraft;
 
 import com.keyin.airport.Airport;
+import com.keyin.cities.Cities;
 import com.keyin.passengers.Passengers;
 import jakarta.persistence.*;
 import java.util.ArrayList;
@@ -18,7 +19,7 @@
     private int numberOfPassengers;
 
     @ManyToMany
-    private List<Airport> airports = new ArrayList<>();
+    private List<Airport> airports = new ArrayList<Airport>();
 
     @OneToMany
     private List<Passengers> passengers = new ArrayList<>();
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># This File is how we set up the connection to our database\nspring.jpa.hibernate.ddl-auto=update\n#spring.datasource.url=jdbc:mysql://s4-fall-2022.ce2vcezehro2.us-east-1.rds.amazonaws.com/fall_2022\nspring.datasource.url=jdbc:mysql://localhost:3306/sprint1\nspring.datasource.username=root\nspring.datasource.password=Keyin2024\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.jpa.show-sql=true
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 2dab17dc1580b96be4b7ab6da05e19f6935ceb78)
+++ b/src/main/resources/application.properties	(date 1730465422069)
@@ -1,7 +1,7 @@
 # This File is how we set up the connection to our database
 spring.jpa.hibernate.ddl-auto=update
 #spring.datasource.url=jdbc:mysql://s4-fall-2022.ce2vcezehro2.us-east-1.rds.amazonaws.com/fall_2022
-spring.datasource.url=jdbc:mysql://localhost:3306/sprint1
+spring.datasource.url=jdbc:mysql://localhost:3306/airportapi
 spring.datasource.username=root
 spring.datasource.password=Keyin2024
 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
Index: src/main/java/com/keyin/airport/AirportService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.keyin.airport;\n\nimport com.keyin.cities.CitiesRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class AirportService {\n\n    @Autowired\n    private AirportRepository airportRepository;\n\n    @Autowired\n    private CitiesRepository citiesRepository;\n\n    public Iterable<Airport> getAllAirports() {\n        return airportRepository.findAll();\n    }\n\n    public Optional<Airport> getAirportById(Long id) {\n        return airportRepository.findById(id);\n    }\n\n    public Optional<Airport> createAirport(Airport airport) {\n        if (airport.getCityName() != null && citiesRepository.existsById(airport.getCityName().getCityId())) {\n            return Optional.of(airportRepository.save(airport));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Airport> updateAirport(Long id, Airport updatedAirport) {\n        return airportRepository.findById(id).map(airport -> {\n            airport.setName(updatedAirport.getName());\n            airport.setCode(updatedAirport.getCode());\n            airport.setCityName(updatedAirport.getCityName());\n            return airportRepository.save(airport);\n        });\n    }\n\n    public boolean deleteAirport(Long id) {\n        if (airportRepository.existsById(id)) {\n            airportRepository.deleteById(id);\n            return true;\n        }\n        return false;\n    }\n\n    public List<Airport> getAirportsByCityId(Long cityId) {\n        if (citiesRepository.existsById(cityId)) {\n            return airportRepository.findByCityId(cityId);\n        }\n        return List.of();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/keyin/airport/AirportService.java b/src/main/java/com/keyin/airport/AirportService.java
--- a/src/main/java/com/keyin/airport/AirportService.java	(revision 2dab17dc1580b96be4b7ab6da05e19f6935ceb78)
+++ b/src/main/java/com/keyin/airport/AirportService.java	(date 1730465304616)
@@ -48,9 +48,9 @@
         return false;
     }
 
-    public List<Airport> getAirportsByCityId(Long cityId) {
+    public Iterable<Airport> getAirportsByCityId(Long cityId) {
         if (citiesRepository.existsById(cityId)) {
-            return airportRepository.findByCityId(cityId);
+            return airportRepository.findAirportByCityName_cityId(cityId);
         }
         return List.of();
     }
Index: src/main/java/com/keyin/airport/AirportRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.keyin.airport;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface AirportRepository extends CrudRepository<Airport, Long> {\n    List<Airport> findByCityId(Long cityId);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/keyin/airport/AirportRepository.java b/src/main/java/com/keyin/airport/AirportRepository.java
--- a/src/main/java/com/keyin/airport/AirportRepository.java	(revision 2dab17dc1580b96be4b7ab6da05e19f6935ceb78)
+++ b/src/main/java/com/keyin/airport/AirportRepository.java	(date 1730465304609)
@@ -1,12 +1,11 @@
 package com.keyin.airport;
 
-import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.repository.CrudRepository;
 import org.springframework.stereotype.Repository;
 
-import java.util.List;
-
 @Repository
 public interface AirportRepository extends CrudRepository<Airport, Long> {
-    List<Airport> findByCityId(Long cityId);
+    Iterable<Airport> findAirportByCityName_cityId(Long cityId);
+
+
 }
Index: src/main/java/com/keyin/airport/Airport.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.keyin.airport;\n\nimport com.keyin.aircraft.Aircraft;\nimport com.keyin.cities.Cities;\nimport jakarta.persistence.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Entity\npublic class Airport {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String name;\n    private String code;\n\n    @ManyToOne\n    @JoinColumn(name = \"city_id\", nullable = false)\n    private Cities cityName;\n\n    @ManyToMany(mappedBy = \"airports\")\n    private List<Aircraft> aircrafts = new ArrayList<>();\n\n    // Constructors\n    public Airport() {}\n\n    public Airport(String name, String code, Cities cityName) {\n        this.name = name;\n        this.code = code;\n        this.cityName = cityName;\n    }\n\n    // Getters and Setters\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getCode() {\n        return code;\n    }\n\n    public void setCode(String code) {\n        this.code = code;\n    }\n\n    public Cities getCityName() {\n        return cityName;\n    }\n\n    public void setCityName(Cities cityName) {\n        this.cityName = cityName;\n    }\n\n    public List<Aircraft> getAircrafts() {\n        return aircrafts;\n    }\n\n    public void setAircrafts(List<Aircraft> aircrafts) {\n        this.aircrafts = aircrafts;\n    }\n\n    // toString method\n    @Override\n    public String toString() {\n        return \"Airport{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", code='\" + code + '\\'' +\n                \", city=\" + cityName +\n                '}';\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/keyin/airport/Airport.java b/src/main/java/com/keyin/airport/Airport.java
--- a/src/main/java/com/keyin/airport/Airport.java	(revision 2dab17dc1580b96be4b7ab6da05e19f6935ceb78)
+++ b/src/main/java/com/keyin/airport/Airport.java	(date 1730465140077)
@@ -11,16 +11,15 @@
 
     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
-    private Long id;
+    private Long airportId;
 
     private String name;
     private String code;
 
     @ManyToOne
-    @JoinColumn(name = "city_id", nullable = false)
     private Cities cityName;
 
-    @ManyToMany(mappedBy = "airports")
+    @ManyToMany
     private List<Aircraft> aircrafts = new ArrayList<>();
 
     // Constructors
@@ -33,12 +32,12 @@
     }
 
     // Getters and Setters
-    public Long getId() {
-        return id;
+    public Long getAirportId() {
+        return airportId;
     }
 
-    public void setId(Long id) {
-        this.id = id;
+    public void setAirportId(Long airportId) {
+        this.airportId = airportId;
     }
 
     public String getName() {
@@ -77,7 +76,7 @@
     @Override
     public String toString() {
         return "Airport{" +
-                "id=" + id +
+                "id=" + airportId +
                 ", name='" + name + '\'' +
                 ", code='" + code + '\'' +
                 ", city=" + cityName +
Index: src/main/java/com/keyin/aircraft/AircraftRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.keyin.aircraft;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface AircraftRepository extends CrudRepository<Aircraft, Long> {\n    Iterable<Aircraft> findAircraftByAirportId(Long id);\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/keyin/aircraft/AircraftRepository.java b/src/main/java/com/keyin/aircraft/AircraftRepository.java
--- a/src/main/java/com/keyin/aircraft/AircraftRepository.java	(revision 2dab17dc1580b96be4b7ab6da05e19f6935ceb78)
+++ b/src/main/java/com/keyin/aircraft/AircraftRepository.java	(date 1730464671900)
@@ -1,10 +1,9 @@
 package com.keyin.aircraft;
 
-import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.repository.CrudRepository;
 import org.springframework.stereotype.Repository;
 
 @Repository
 public interface AircraftRepository extends CrudRepository<Aircraft, Long> {
-    Iterable<Aircraft> findAircraftByAirportId(Long id);
+    Iterable<Aircraft> findAircraftByAirports_airportId(Long airportId);
 }
\ No newline at end of file
Index: src/main/java/com/keyin/aircraft/AircraftService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.keyin.aircraft;\n\nimport com.keyin.airport.Airport;\nimport com.keyin.airport.AirportRepository;\nimport com.keyin.passengers.Passengers;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class AircraftService {\n\n    @Autowired\n    private AircraftRepository aircraftRepository;\n\n    @Autowired\n    private AirportRepository airportRepository;\n\n    public Iterable<Aircraft> getAllAircraft() {\n        return aircraftRepository.findAll();\n    }\n\n    public Optional<Aircraft> getAircraftById(Long id) {\n        return aircraftRepository.findById(id);\n    }\n\n    public Aircraft createAircraft(Aircraft aircraft) {\n        return aircraftRepository.save(aircraft);\n    }\n\n    public Optional<Aircraft> updateAircraft(Long id, Aircraft updatedAircraft) {\n        return aircraftRepository.findById(id).map(aircraft -> {\n            aircraft.setType(updatedAircraft.getType());\n            aircraft.setAirlineName(updatedAircraft.getAirlineName());\n            aircraft.setNumberOfPassengers(updatedAircraft.getNumberOfPassengers());\n            return aircraftRepository.save(aircraft);\n        });\n    }\n\n    public boolean deleteAircraft(Long id) {\n        if (aircraftRepository.existsById(id)) {\n            aircraftRepository.deleteById(id);\n            return true;\n        }\n        return false;\n    }\n\n    public Optional<List<Passengers>> getPassengersByAircraft(Long id) {\n        return aircraftRepository.findById(id).map(Aircraft::getPassengers);\n    }\n\n    public Iterable<Aircraft> findAircraftByAirportId(Long id) {\n        return aircraftRepository.findAircraftByAirportId(id);\n    }\n\n\n    public Optional<Aircraft> addAirportToAircraft(Long aircraftId, Long airportId) {\n        Optional<Aircraft> aircraftOpt = aircraftRepository.findById(aircraftId);\n        Optional<Airport> airportOpt = airportRepository.findById(airportId);\n\n        if (aircraftOpt.isPresent() && airportOpt.isPresent()) {\n            Aircraft aircraft = aircraftOpt.get();\n            aircraft.getAirports().add(airportOpt.get());\n            return Optional.of(aircraftRepository.save(aircraft));\n        }\n\n        return Optional.empty();\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/keyin/aircraft/AircraftService.java b/src/main/java/com/keyin/aircraft/AircraftService.java
--- a/src/main/java/com/keyin/aircraft/AircraftService.java	(revision 2dab17dc1580b96be4b7ab6da05e19f6935ceb78)
+++ b/src/main/java/com/keyin/aircraft/AircraftService.java	(date 1730464671909)
@@ -5,7 +5,6 @@
 import com.keyin.passengers.Passengers;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
-import org.springframework.transaction.annotation.Transactional;
 
 import java.util.List;
 import java.util.Optional;
@@ -52,8 +51,8 @@
         return aircraftRepository.findById(id).map(Aircraft::getPassengers);
     }
 
-    public Iterable<Aircraft> findAircraftByAirportId(Long id) {
-        return aircraftRepository.findAircraftByAirportId(id);
+    public Iterable<Aircraft> findAircraftByAirportId(Long airportId) {
+        return aircraftRepository.findAircraftByAirports_airportId(airportId);
     }
 
 
Index: src/main/java/com/keyin/airport/AirportController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.keyin.airport;\n\n//import org.springframework.beans.factory.annotation.Autowired;\n//import org.springframework.http.ResponseEntity;\n//import org.springframework.web.bind.annotation.*;\n//\n//import java.util.List;\n//import java.util.Optional;\n//\n//@RestController\n//@RequestMapping(\"/api/airports\")\n//public class AirportController {\n//\n//    @Autowired\n//    private AirportRepository airportRepository;\n//\n//    @Autowired\n//    private CityRepository cityRepository;\n//\n//    // Get all airports\n//    @GetMapping\n//    public List<Airport> getAllAirports() {\n//        return airportRepository.findAll();\n//    }\n//\n//    // Get an airport by ID\n//    @GetMapping(\"/{id}\")\n//    public ResponseEntity<Airport> getAirportById(@PathVariable Long id) {\n//        Optional<Airport> airport = airportRepository.findById(id);\n//        return airport.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());\n//    }\n//\n//    // Create a new airport\n//    @PostMapping\n//    public ResponseEntity<Airport> createAirport(@RequestBody Airport airport) {\n//        // Check if the city exists before creating the airport\n//        if (airport.getCityName() != null && cityRepository.existsById(airport.getCityName().getCityId())) {\n//            Airport savedAirport = airportRepository.save(airport);\n//            return ResponseEntity.ok(savedAirport);\n//        }\n//        return ResponseEntity.badRequest().build();\n//    }\n//\n//    // Update an airport\n//    @PutMapping(\"/{id}\")\n//    public ResponseEntity<Airport> updateAirport(@PathVariable Long id, @RequestBody Airport updatedAirport) {\n//        return airportRepository.findById(id).map(airport -> {\n//            airport.setName(updatedAirport.getName());\n//            airport.setCode(updatedAirport.getCode());\n//            airport.setCity(updatedAirport.getCity());\n//            return ResponseEntity.ok(airportRepository.save(airport));\n//        }).orElseGet(() -> ResponseEntity.notFound().build());\n//    }\n//\n//    // Delete an airport\n//    @DeleteMapping(\"/{id}\")\n//    public ResponseEntity<Void> deleteAirport(@PathVariable Long id) {\n//        if (airportRepository.existsById(id)) {\n//            airportRepository.deleteById(id);\n//            return ResponseEntity.noContent().build();\n//        }\n//        return ResponseEntity.notFound().build();\n//    }\n//\n//    // Get airports by city ID\n//    @GetMapping(\"/city/{cityId}\")\n//    public ResponseEntity<List<Airport>> getAirportsByCity(@PathVariable Long cityId) {\n//        if (cityRepository.existsById(cityId)) {\n//            List<Airport> airports = airportRepository.findByCityId(cityId);\n//            return ResponseEntity.ok(airports);\n//        }\n//        return ResponseEntity.notFound().build();\n//    }\n//}\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/api/airports\")\npublic class AirportController {\n\n    @Autowired\n    private AirportService airportService;\n\n    // Get all airports\n    @GetMapping\n    public Iterable<Airport> getAllAirports() {\n        return airportService.getAllAirports();\n    }\n\n    // Get an airport by ID\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Airport> getAirportById(@PathVariable Long id) {\n        Optional<Airport> airport = airportService.getAirportById(id);\n        return airport.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    // Create a new airport\n    @PostMapping\n    public ResponseEntity<Airport> createAirport(@RequestBody Airport airport) {\n        Optional<Airport> savedAirport = airportService.createAirport(airport);\n        return savedAirport.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.badRequest().build());\n    }\n\n    // Update an airport\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<Airport> updateAirport(@PathVariable Long id, @RequestBody Airport updatedAirport) {\n        Optional<Airport> airport = airportService.updateAirport(id, updatedAirport);\n        return airport.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    // Delete an airport\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteAirport(@PathVariable Long id) {\n        if (airportService.deleteAirport(id)) {\n            return ResponseEntity.noContent().build();\n        }\n        return ResponseEntity.notFound().build();\n    }\n\n    // Get airports by city ID\n    @GetMapping(\"/city/{cityId}\")\n    public ResponseEntity<List<Airport>> getAirportsByCity(@PathVariable Long cityId) {\n        List<Airport> airports = airportService.getAirportsByCityId(cityId);\n        if (!airports.isEmpty()) {\n            return ResponseEntity.ok(airports);\n        }\n        return ResponseEntity.notFound().build();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/keyin/airport/AirportController.java b/src/main/java/com/keyin/airport/AirportController.java
--- a/src/main/java/com/keyin/airport/AirportController.java	(revision 2dab17dc1580b96be4b7ab6da05e19f6935ceb78)
+++ b/src/main/java/com/keyin/airport/AirportController.java	(date 1730413436359)
@@ -1,78 +1,5 @@
 package com.keyin.airport;
 
-//import org.springframework.beans.factory.annotation.Autowired;
-//import org.springframework.http.ResponseEntity;
-//import org.springframework.web.bind.annotation.*;
-//
-//import java.util.List;
-//import java.util.Optional;
-//
-//@RestController
-//@RequestMapping("/api/airports")
-//public class AirportController {
-//
-//    @Autowired
-//    private AirportRepository airportRepository;
-//
-//    @Autowired
-//    private CityRepository cityRepository;
-//
-//    // Get all airports
-//    @GetMapping
-//    public List<Airport> getAllAirports() {
-//        return airportRepository.findAll();
-//    }
-//
-//    // Get an airport by ID
-//    @GetMapping("/{id}")
-//    public ResponseEntity<Airport> getAirportById(@PathVariable Long id) {
-//        Optional<Airport> airport = airportRepository.findById(id);
-//        return airport.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
-//    }
-//
-//    // Create a new airport
-//    @PostMapping
-//    public ResponseEntity<Airport> createAirport(@RequestBody Airport airport) {
-//        // Check if the city exists before creating the airport
-//        if (airport.getCityName() != null && cityRepository.existsById(airport.getCityName().getCityId())) {
-//            Airport savedAirport = airportRepository.save(airport);
-//            return ResponseEntity.ok(savedAirport);
-//        }
-//        return ResponseEntity.badRequest().build();
-//    }
-//
-//    // Update an airport
-//    @PutMapping("/{id}")
-//    public ResponseEntity<Airport> updateAirport(@PathVariable Long id, @RequestBody Airport updatedAirport) {
-//        return airportRepository.findById(id).map(airport -> {
-//            airport.setName(updatedAirport.getName());
-//            airport.setCode(updatedAirport.getCode());
-//            airport.setCity(updatedAirport.getCity());
-//            return ResponseEntity.ok(airportRepository.save(airport));
-//        }).orElseGet(() -> ResponseEntity.notFound().build());
-//    }
-//
-//    // Delete an airport
-//    @DeleteMapping("/{id}")
-//    public ResponseEntity<Void> deleteAirport(@PathVariable Long id) {
-//        if (airportRepository.existsById(id)) {
-//            airportRepository.deleteById(id);
-//            return ResponseEntity.noContent().build();
-//        }
-//        return ResponseEntity.notFound().build();
-//    }
-//
-//    // Get airports by city ID
-//    @GetMapping("/city/{cityId}")
-//    public ResponseEntity<List<Airport>> getAirportsByCity(@PathVariable Long cityId) {
-//        if (cityRepository.existsById(cityId)) {
-//            List<Airport> airports = airportRepository.findByCityId(cityId);
-//            return ResponseEntity.ok(airports);
-//        }
-//        return ResponseEntity.notFound().build();
-//    }
-//}
-
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.*;
@@ -125,9 +52,9 @@
 
     // Get airports by city ID
     @GetMapping("/city/{cityId}")
-    public ResponseEntity<List<Airport>> getAirportsByCity(@PathVariable Long cityId) {
-        List<Airport> airports = airportService.getAirportsByCityId(cityId);
-        if (!airports.isEmpty()) {
+    public ResponseEntity<Iterable<Airport>> getAirportsByCity(@PathVariable Long cityId) {
+        Iterable<Airport> airports = airportService.getAirportsByCityId(cityId);
+        if (airports.iterator().hasNext()) {
             return ResponseEntity.ok(airports);
         }
         return ResponseEntity.notFound().build();
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"4078cfcf-94c1-416c-8a08-a95bbc508eaf\" name=\"Changes\" comment=\"fixes\">\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/com/keyin/aircraft/AircraftController.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/com/keyin/aircraft/AircraftRepository.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/com/keyin/aircraft/AircraftService.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Interface\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 4\n}</component>\n  <component name=\"ProjectId\" id=\"2nkpef7QnGLvBE8XLmGATPynSd7\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Application.RestServiceApplication.executor\": \"Debug\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"git-widget-placeholder\": \"Aircraft-CRS-Reagan\",\n    \"kotlin-language-version-configured\": \"true\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RunManager\">\n    <configuration name=\"RestServiceApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.keyin.RestServiceApplication\" />\n      <module name=\"Sprint1_SDAT_DevOps\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.RestServiceApplication\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-jdk-9823dce3aa75-b114ca120d71-intellij.indexing.shared.core-IU-242.21829.142\" />\n        <option value=\"bundled-js-predefined-d6986cc7102b-7c0b70fcd90d-JavaScript-IU-242.21829.142\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"4078cfcf-94c1-416c-8a08-a95bbc508eaf\" name=\"Changes\" comment=\"\" />\n      <created>1729527027504</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1729527027504</updated>\n      <workItem from=\"1730126900958\" duration=\"1135000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"aircraft commit - Reagan\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730134659060</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730134659061</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"fixes\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730135285783</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730135285783</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"fixes\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730226137710</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730226137710</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"4\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"aircraft commit - Reagan\" />\n    <MESSAGE value=\"Repo-Service-Controller commit\" />\n    <MESSAGE value=\"fixes\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"fixes\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 2dab17dc1580b96be4b7ab6da05e19f6935ceb78)
+++ b/.idea/workspace.xml	(date 1730466056077)
@@ -4,11 +4,16 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="4078cfcf-94c1-416c-8a08-a95bbc508eaf" name="Changes" comment="fixes">
-      <change afterPath="$PROJECT_DIR$/src/main/java/com/keyin/aircraft/AircraftController.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/com/keyin/aircraft/AircraftRepository.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/com/keyin/aircraft/AircraftService.java" afterDir="false" />
+    <list default="true" id="4078cfcf-94c1-416c-8a08-a95bbc508eaf" name="Changes" comment="Updated code">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/keyin/aircraft/Aircraft.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/keyin/aircraft/Aircraft.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/keyin/aircraft/AircraftRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/keyin/aircraft/AircraftRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/keyin/aircraft/AircraftService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/keyin/aircraft/AircraftService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/keyin/airport/Airport.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/keyin/airport/Airport.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/keyin/airport/AirportController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/keyin/airport/AirportController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/keyin/airport/AirportRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/keyin/airport/AirportRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/keyin/airport/AirportService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/keyin/airport/AirportService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/application.properties" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -18,8 +23,8 @@
   <component name="FileTemplateManagerImpl">
     <option name="RECENT_TEMPLATES">
       <list>
-        <option value="Interface" />
         <option value="Class" />
+        <option value="Interface" />
       </list>
     </option>
   </component>
@@ -42,10 +47,10 @@
   </component>
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
-    "Application.RestServiceApplication.executor": "Debug",
+    "Application.RestServiceApplication.executor": "Run",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "git-widget-placeholder": "Aircraft-CRS-Reagan",
+    "git-widget-placeholder": "main",
     "kotlin-language-version-configured": "true",
     "node.js.detected.package.eslint": "true",
     "node.js.detected.package.tslint": "true",
@@ -111,7 +116,15 @@
       <option name="project" value="LOCAL" />
       <updated>1730226137710</updated>
     </task>
-    <option name="localTasksCounter" value="4" />
+    <task id="LOCAL-00004" summary="Updated code">
+      <option name="closed" value="true" />
+      <created>1730308795069</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1730308795069</updated>
+    </task>
+    <option name="localTasksCounter" value="5" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -132,6 +145,7 @@
     <MESSAGE value="aircraft commit - Reagan" />
     <MESSAGE value="Repo-Service-Controller commit" />
     <MESSAGE value="fixes" />
-    <option name="LAST_COMMIT_MESSAGE" value="fixes" />
+    <MESSAGE value="Updated code" />
+    <option name="LAST_COMMIT_MESSAGE" value="Updated code" />
   </component>
 </project>
\ No newline at end of file
